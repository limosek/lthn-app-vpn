global
        maxconn         {maxconn}
        daemon
        log {f_logsocket}
        stats socket {f_sock} mode 600 level admin
        stats timeout {timeout}

        # SSL options
        ssl-dh-param-file {f_dh}
        ca-base {cabase}
        crt-base {crtbase}
        ssl-default-bind-ciphers ECDH+AESGCM
        ssl-default-bind-options force-tlsv12

frontend ssltunnel
        bind            {bind_addr}:{bind_port} ssl crt {f_site_pem}
        mode            http
        log             {f_logsocket}
        option          httplog
#        option          http_proxy
	option          logasap
        option          contstats
	option		http-keep-alive
        maxconn         {maxconn}
        timeout client  {timeout}
        timeout tarpit {ttimeout}

        capture request header {payment_header} len 64

        acl allowed_payments hdr({payment_header}) -u 20 -M
	acl is_mgmt_host hdr_reg(host) {ctrldomain}
        acl is_mgmt_path path_beg {ctrlpath}
        acl is_mgmt_id hdr_reg({mgmt_header}) ^{mgmtid}$
        acl is_proxy_request url_reg '.*://.*'
        acl is_connect method CONNECT
        acl has_cf hdr_cnt(CF-Connecting-IP) eq 1
        acl has_ff hdr_cnt(X-Forwarded-For) eq 1
        acl valid_method        method  GET POST OPTIONS PUT CONNECT
        acl is_proxy_host dst {forward_proxy_host}
	acl allowed_src_ips src -u 10 -f {f_allow_src_ips}        
        acl deny_src_ips src -u 11 -f {f_deny_src_ips}
        acl deny_dst_urlips url_ip -u 12 -f {f_deny_dst_ips}
        acl deny_dst_doms url_dom -m reg -i -u 14 -f {f_deny_dst_doms}

        tcp-request content track-sc0 hdr_ip(CF-Connecting-IP,-1) if HTTP has_cf
        tcp-request content track-sc0 hdr_ip(X-Forwarded-For,-1) if HTTP !has_cf has_ff
        tcp-request content track-sc0 src if HTTP !has_cf !has_ff
        tcp-request inspect-delay 1s
 
        stick-table type ip size 500k expire 60s store conn_cur,conn_rate({conns_period}),http_req_rate({conns_period}),http_err_rate({conns_period})

        http-request set-header X-LTHN-Reason DENY_SRC_IP if deny_src_ips
        http-request set-header X-LTHN-Reason DENY_DST_URLIP if deny_dst_urlips !is_connect
        http-request set-header X-LTHN-Reason DENY_METHOD if !valid_method
        http-request set-header X-LTHN-Reason DENY_DOMAIN if deny_dst_doms
        http-request set-header X-LTHN-Overlimit CONNECTIONS if {{ src_conn_cur ge {max_conns_per_ip} }}
        http-request set-header X-LTHN-Overlimit CONNRATE if {{ src_conn_rate ge {max_conns_per_period} }}
        http-request set-header X-LTHN-Overlimit REQRATE if {{ sc0_http_req_rate() gt {max_requests_per_period} }}
        http-request set-header X-LTHN-Reason MGMT_OK if is_mgmt_host is_mgmt_path is_mgmt_id allowed_payments
        http-request set-header X-LTHN-Reason MGMT_NO_PAYMENT if is_mgmt_host is_mgmt_path is_mgmt_id !allowed_payments
        http-request set-header X-LTHN-Reason MGMT_BAD_ID if is_mgmt_host is_mgmt_path !is_mgmt_id
        http-request set-header X-LTHN-Reason TO_PROXY if allowed_payments is_proxy_request !is_mgmt_host !deny_src_ips !deny_dst_urlips valid_method !deny_dst_doms
        http-request set-header X-LTHN-Reason TO_PROXY_CONNECT if allowed_payments is_connect !is_mgmt_host !deny_src_ips !deny_dst_doms

        # If we have no payment, just return 403
        http-request set-header X-LTHN-Reason NO_PAYMENT if !allowed_payments is_proxy_request !is_mgmt_host

        # If there is non-proxy request, return 503
        http-request set-header X-LTHN-Reason NO_PROXY_REQUEST if !is_proxy_request !is_connect

        # capture reason
        http-request capture hdr(X-LTHN-Reason) len 16
        http-request capture hdr(X-LTHN-Overlimit) len 16

        # Deny source IP
        use_backend b-error if deny_src_ips

        # Deny dst IP in url
        use_backend b-error if deny_dst_urlips !is_connect

        # Deny bad method
        use_backend b-error if !valid_method

        # Deny bad domain
        use_backend b-error if deny_dst_doms

        # TARPIT the new connection if the client already has {max_conns_per_ip} opened
        use_backend b-overlimit if {{ src_conn_cur ge {max_conns_per_ip} }}

        # TARPIT the new connection if the client has opened more than {max_conns_per_period} connections in {conns_period}
        use_backend b-overlimit if {{ src_conn_rate ge {max_conns_per_period} }}

        # TARPIT the connection if the client has passed the HTTP request rate connections in {conns_period}
        use_backend b-overlimit if {{ sc0_http_req_rate() gt {max_requests_per_period} }}

        #http://_remote_/status with right header and payment
        use_backend b-status-ok if is_mgmt_host is_mgmt_path is_mgmt_id allowed_payments

        #http://_remote_/status with right header without payment
	use_backend b-status-nopayment if is_mgmt_host is_mgmt_path is_mgmt_id !allowed_payments

        #http://_remote_/status with bad header
	use_backend b-status-badid if is_mgmt_host is_mgmt_path !is_mgmt_id
        
        # Default is to proxy connection if there is proxy request and allowed payment
        use_backend b-preproxy if allowed_payments is_proxy_request !is_mgmt_host !deny_src_ips !deny_dst_urlips valid_method !deny_dst_doms
        use_backend b-preproxy if allowed_payments is_connect !is_mgmt_host !deny_src_ips !deny_dst_doms

        
        # Use backend error as last resort
        default_backend b-error 
         
backend b-preproxy
        mode            http
        timeout connect {ctimeout}
        timeout server  {timeout}
        retries         2
        option          httplog

	stick-table type string len 256 size 10k nopurge
        stick on hdr({payment_header}) table b-preproxy

        server s-proxy {forward_proxy} check

backend b-status-ok
        mode            http
        timeout server  {timeout}
        timeout connect {ctimeout}
	timeout tarpit {ttimeout}

        http-request set-uri /authid/%[hdr({payment_header})]
	#http-request tarpit
        server Local {disp_http_host}:{disp_http_port}
        errorfile 500 {f_status}
        errorfile 503 {f_status}

backend b-status-nopayment
        mode            http
        timeout server  {timeout}
        timeout connect {ctimeout}
	timeout tarpit {ttimeout}

	http-request tarpit
        errorfile 500 {f_err_nopayment}

backend b-status-badid
        mode            http
        timeout server  {timeout}
        timeout connect {ctimeout}
	timeout tarpit {ttimeout}

	http-request tarpit
        errorfile 500 {f_err_badid}

backend b-error
	mode http
	timeout tarpit {ttimeout}
	timeout server  {timeout}
        timeout connect {ctimeout}

	#http-request tarpit
	errorfile 500 {f_err_generic}
        errorfile 503 {f_err_generic}


backend b-overlimit
	mode http
	timeout tarpit {ttimeout}
	timeout server  {timeout}
        timeout connect {ctimeout}

	http-request tarpit
	errorfile 500 {f_err_overlimit}
        errorfile 503 {f_err_overlimit}
